input AddToChannelMessagesChannelInput {
  messagesMessageId: ID!
  channelChannelId: ID!
  clientMutationId: String!
}

type AddToChannelMessagesPayload {
  viewer: Viewer!
  clientMutationId: String!
  channelChannel: Channel
  messagesMessage: Message
  channelChannelEdge: ChannelEdge
  messagesMessageEdge: MessageEdge
}

type AddToChannelOnUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipientsUser: User
  channelsChannel: Channel
  recipientsUserEdge: UserEdge
  channelsChannelEdge: ChannelEdge
}

input AddToChannelOnUserUserInput {
  channelsChannelId: ID!
  recipientsUserId: ID!
  clientMutationId: String!
}

type AddToMessageOnUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  messagesMessage: Message
  userUserEdge: UserEdge
  messagesMessageEdge: MessageEdge
}

input AddToMessageOnUserUserInput {
  messagesMessageId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserOwnChannelsPayload {
  viewer: Viewer!
  clientMutationId: String!
  ownerUser: User
  myChannelsChannel: Channel
  ownerUserEdge: UserEdge
  myChannelsChannelEdge: ChannelEdge
}

input AddToUserOwnChannelsUserInput {
  myChannelsChannelId: ID!
  ownerUserId: ID!
  clientMutationId: String!
}

input AUTH_PROVIDER_EMAIL {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  email: AUTH_PROVIDER_EMAIL
}

type Channel implements Node {
  createdAt: DateTime!
  id: ID!
  image: String
  messages(filter: MessageFilter, orderBy: MessageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection
  owner(filter: UserFilter): User
  recipients(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  title: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type ChannelConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ChannelEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type ChannelEdge {
  # The item at the end of the edge.
  node: Channel!

  # A cursor for use in pagination.
  cursor: String!
}

input ChannelFilter {
  # Logical AND on all given filters.
  AND: [ChannelFilter!]

  # Logical OR on all given filters.
  OR: [ChannelFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  image: String

  # All values that are not equal to given value.
  image_not: String

  # All values that are contained in given list.
  image_in: [String!]

  # All values that are not contained in given list.
  image_not_in: [String!]

  # All values less than the given value.
  image_lt: String

  # All values less than or equal the given value.
  image_lte: String

  # All values greater than the given value.
  image_gt: String

  # All values greater than or equal the given value.
  image_gte: String

  # All values containing the given string.
  image_contains: String

  # All values not containing the given string.
  image_not_contains: String

  # All values starting with the given string.
  image_starts_with: String

  # All values not starting with the given string.
  image_not_starts_with: String

  # All values ending with the given string.
  image_ends_with: String

  # All values not ending with the given string.
  image_not_ends_with: String
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  messages_every: MessageFilter
  messages_some: MessageFilter
  messages_none: MessageFilter
  owner: UserFilter
  recipients_every: UserFilter
  recipients_some: UserFilter
  recipients_none: UserFilter
}

input ChannelmessagesMessage {
  text: String!
  userId: ID
}

enum ChannelOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CreateChannel {
  image: String
  title: String!
  ownerId: ID
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
}

input CreateChannelInput {
  image: String
  title: String!
  ownerId: ID
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
  clientMutationId: String!
}

type CreateChannelPayload {
  viewer: Viewer!
  clientMutationId: String!
  channel: Channel
  edge: ChannelEdge
  owner: User
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateMessage {
  text: String!
  channelId: ID
  channel: MessagechannelChannel
  userId: ID
}

input CreateMessageInput {
  text: String!
  channelId: ID
  channel: MessagechannelChannel
  userId: ID
  clientMutationId: String!
}

type CreateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  channel: Channel
  user: User
}

input CreateUser {
  name: String
  channelsIds: [ID!]
  channels: [UserchannelsChannel!]
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
  myChannelsIds: [ID!]
  myChannels: [UsermyChannelsChannel!]
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteChannelInput {
  id: ID!
  clientMutationId: String!
}

type DeleteChannelPayload {
  viewer: Viewer!
  clientMutationId: String!
  channel: Channel
  edge: ChannelEdge
  owner: User
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteMessageInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  channel: Channel
  user: User
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type Message implements Node {
  channel(filter: ChannelFilter): Channel
  createdAt: DateTime!
  id: ID!
  text: String!
  updatedAt: DateTime!
  user(filter: UserFilter): User!
}

input MessagechannelChannel {
  image: String
  title: String!
  ownerId: ID
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge.
  node: Message!

  # A cursor for use in pagination.
  cursor: String!
}

input MessageFilter {
  # Logical AND on all given filters.
  AND: [MessageFilter!]

  # Logical OR on all given filters.
  OR: [MessageFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  channel: ChannelFilter
  user: UserFilter
}

enum MessageOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Mutation {
  createChannel(input: CreateChannelInput!): CreateChannelPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createMessage(input: CreateMessageInput!): CreateMessagePayload
  updateChannel(input: UpdateChannelInput!): UpdateChannelPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateChannel(input: UpdateOrCreateChannelInput!): UpdateOrCreateChannelPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateMessage(input: UpdateOrCreateMessageInput!): UpdateOrCreateMessagePayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteChannel(input: DeleteChannelInput!): DeleteChannelPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteMessage(input: DeleteMessageInput!): DeleteMessagePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToChannelMessages(input: AddToChannelMessagesChannelInput!): AddToChannelMessagesPayload
  addToChannelOnUser(input: AddToChannelOnUserUserInput!): AddToChannelOnUserPayload
  addToMessageOnUser(input: AddToMessageOnUserUserInput!): AddToMessageOnUserPayload
  addToUserOwnChannels(input: AddToUserOwnChannelsUserInput!): AddToUserOwnChannelsPayload
  removeFromChannelMessages(input: RemoveFromChannelMessagesChannelInput!): RemoveFromChannelMessagesPayload
  removeFromChannelOnUser(input: RemoveFromChannelOnUserUserInput!): RemoveFromChannelOnUserPayload
  removeFromUserOwnChannels(input: RemoveFromUserOwnChannelsUserInput!): RemoveFromUserOwnChannelsPayload
  signinUser(input: SigninUserInput!): SigninPayload!
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromChannelMessagesChannelInput {
  messagesMessageId: ID!
  channelChannelId: ID!
  clientMutationId: String!
}

type RemoveFromChannelMessagesPayload {
  viewer: Viewer!
  clientMutationId: String!
  channelChannel: Channel
  messagesMessage: Message
  channelChannelEdge: ChannelEdge
  messagesMessageEdge: MessageEdge
}

type RemoveFromChannelOnUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipientsUser: User
  channelsChannel: Channel
  recipientsUserEdge: UserEdge
  channelsChannelEdge: ChannelEdge
}

input RemoveFromChannelOnUserUserInput {
  channelsChannelId: ID!
  recipientsUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserOwnChannelsPayload {
  viewer: Viewer!
  clientMutationId: String!
  ownerUser: User
  myChannelsChannel: Channel
  ownerUserEdge: UserEdge
  myChannelsChannelEdge: ChannelEdge
}

input RemoveFromUserOwnChannelsUserInput {
  myChannelsChannelId: ID!
  ownerUserId: ID!
  clientMutationId: String!
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type SigninPayload {
  token: String
  user: User
  clientMutationId: String
  viewer: Viewer!
}

input SigninUserInput {
  email: AUTH_PROVIDER_EMAIL
  clientMutationId: String!
}

input SignupUserInput {
  name: String
  channelsIds: [ID!]
  channels: [UserchannelsChannel!]
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
  myChannelsIds: [ID!]
  myChannels: [UsermyChannelsChannel!]
  clientMutationId: String!
  authProvider: AuthProviderSignupData!
}

input UpdateChannel {
  id: ID!
  image: String
  title: String
  ownerId: ID
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
}

input UpdateChannelInput {
  id: ID!
  image: String
  title: String
  ownerId: ID
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
  clientMutationId: String!
}

type UpdateChannelPayload {
  viewer: Viewer!
  clientMutationId: String!
  channel: Channel
  edge: ChannelEdge
  owner: User
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateMessage {
  id: ID!
  text: String
  channelId: ID
  channel: MessagechannelChannel
  userId: ID
}

input UpdateMessageInput {
  id: ID!
  text: String
  channelId: ID
  channel: MessagechannelChannel
  userId: ID
  clientMutationId: String!
}

type UpdateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  channel: Channel
  user: User
}

input UpdateOrCreateChannelInput {
  update: UpdateChannel!
  create: CreateChannel!
  clientMutationId: String!
}

type UpdateOrCreateChannelPayload {
  viewer: Viewer!
  clientMutationId: String!
  channel: Channel
  edge: ChannelEdge
  owner: User
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateMessageInput {
  update: UpdateMessage!
  create: CreateMessage!
  clientMutationId: String!
}

type UpdateOrCreateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  channel: Channel
  user: User
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateUser {
  id: ID!
  name: String
  channelsIds: [ID!]
  channels: [UserchannelsChannel!]
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
  myChannelsIds: [ID!]
  myChannels: [UsermyChannelsChannel!]
}

input UpdateUserInput {
  id: ID!
  name: String
  channelsIds: [ID!]
  channels: [UserchannelsChannel!]
  messagesIds: [ID!]
  messages: [UsermessagesMessage!]
  myChannelsIds: [ID!]
  myChannels: [UsermyChannelsChannel!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  channels(filter: ChannelFilter, orderBy: ChannelOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection
  createdAt: DateTime!
  email: String
  id: ID!
  messages(filter: MessageFilter, orderBy: MessageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection
  myChannels(filter: ChannelFilter, orderBy: ChannelOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection
  name: String!
  password: String
  updatedAt: DateTime!
}

input UserchannelsChannel {
  image: String
  title: String!
  ownerId: ID
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  channels_every: ChannelFilter
  channels_some: ChannelFilter
  channels_none: ChannelFilter
  messages_every: MessageFilter
  messages_some: MessageFilter
  messages_none: MessageFilter
  myChannels_every: ChannelFilter
  myChannels_some: ChannelFilter
  myChannels_none: ChannelFilter
}

input UsermessagesMessage {
  text: String!
  channelId: ID
  channel: MessagechannelChannel
}

input UsermyChannelsChannel {
  image: String
  title: String!
  messagesIds: [ID!]
  messages: [ChannelmessagesMessage!]
  recipientsIds: [ID!]
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allChannels(filter: ChannelFilter, orderBy: ChannelOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allMessages(filter: MessageFilter, orderBy: MessageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Channel(id: ID, title: String): Channel
  File(id: ID, secret: String, url: String): File
  Message(id: ID): Message
  User(email: String, id: ID, name: String): User
  id: ID!
}

